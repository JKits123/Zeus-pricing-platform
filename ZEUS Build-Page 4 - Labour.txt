<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZEUS - Labour Allocation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f8fffe 0%, #e8f5f0 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1600px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            overflow: hidden;
            border-top: 4px solid #00B04F;
        }

        .header {
            background: linear-gradient(135deg, #00B04F 0%, #009944 100%);
            color: white;
            padding: 20px 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 20px;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .company-logo {
            font-size: 18px;
            font-weight: bold;
            color: white;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .logo {
            font-size: 42px;
            font-weight: bold;
            color: white;
            letter-spacing: 3px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .subtitle {
            font-size: 16px;
            opacity: 0.95;
            margin-top: 5px;
            color: #f0f8ff;
        }

        .content {
            display: grid;
            grid-template-columns: 1fr 400px;
            gap: 20px;
            padding: 30px;
        }

        .main-content {
            overflow-y: auto;
        }

        .sidebar {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            height: fit-content;
            position: sticky;
            top: 20px;
        }

        .rates-section {
            background: linear-gradient(135deg, #ffebee 0%, #fce4ec 100%);
            border: 2px solid #e74c3c;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

        .rates-title {
            font-size: 18px;
            font-weight: bold;
            color: #c0392b;
            margin-bottom: 15px;
        }

        .rates-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .rate-item {
            background: white;
            padding: 15px;
            border-radius: 6px;
            border-left: 4px solid #e74c3c;
            text-align: center;
        }

        .rate-label {
            font-size: 14px;
            color: #666;
            margin-bottom: 5px;
        }

        .rate-value {
            font-size: 20px;
            font-weight: bold;
            color: #e74c3c;
        }

        .rate-input {
            width: 80px;
            padding: 5px;
            border: 2px solid #e74c3c;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
            color: #e74c3c;
        }

        .material-choice-section {
            background: linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%);
            border: 2px solid #ff9800;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
        }

        .choice-title {
            font-size: 18px;
            font-weight: bold;
            color: #e65100;
            margin-bottom: 15px;
        }

        .choice-toggle {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .toggle-switch {
            position: relative;
            width: 60px;
            height: 30px;
            background-color: #ccc;
            border-radius: 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .toggle-switch.active {
            background-color: #00B04F;
        }

        .toggle-slider {
            position: absolute;
            top: 3px;
            left: 3px;
            width: 24px;
            height: 24px;
            background-color: white;
            border-radius: 50%;
            transition: transform 0.3s;
        }

        .toggle-switch.active .toggle-slider {
            transform: translateX(30px);
        }

        .section {
            margin-bottom: 35px;
            padding: 25px;
            border: 2px solid #ecf0f1;
            border-radius: 8px;
            background: #fafbfc;
        }

        .section-title {
            font-size: 20px;
            font-weight: bold;
            color: #00B04F;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #00B04F;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .task-card {
            border: 2px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            background: white;
            transition: all 0.3s ease;
        }

        .task-card:hover {
            border-color: #00B04F;
            box-shadow: 0 2px 8px rgba(0, 176, 79, 0.1);
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .task-name {
            font-size: 16px;
            font-weight: bold;
            color: #00B04F;
        }

        .complexity-selector {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .complexity-btn {
            padding: 6px 12px;
            border: 2px solid #00B04F;
            background: white;
            color: #00B04F;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .complexity-btn.active {
            background: #00B04F;
            color: white;
        }

        .task-details {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .detail-item {
            text-align: center;
            padding: 10px;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .detail-label {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
        }

        .detail-value {
            font-size: 14px;
            font-weight: bold;
        }

        .hours-input {
            width: 60px;
            padding: 5px;
            border: 2px solid #00B04F;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
        }

        .crew-selector {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }

        .crew-option {
            padding: 10px;
            border: 2px solid #00B04F;
            border-radius: 6px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
        }

        .crew-option.active {
            background: #00B04F;
            color: white;
        }

        .crew-label {
            font-size: 12px;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .crew-rate {
            font-size: 14px;
            font-weight: bold;
            color: #e74c3c;
        }

        .task-calculation {
            background: #f8f9fa;
            border-radius: 6px;
            padding: 15px;
            margin-top: 15px;
            border: 1px solid #dee2e6;
        }

        .calc-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .calc-row:last-child {
            margin-bottom: 0;
            font-weight: bold;
            border-top: 1px solid #dee2e6;
            padding-top: 8px;
        }

        .cost-value {
            color: #e74c3c;
            font-weight: bold;
        }

        .profit-value {
            color: #3498db;
            font-weight: bold;
        }

        .sale-value {
            color: #27ae60;
            font-weight: bold;
        }

        .legend {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-bottom: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 600;
        }

        .labour-summary {
            background: white;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            border: 2px solid #00B04F;
        }

        .labour-summary h3 {
            color: #00B04F;
            margin-bottom: 15px;
            font-size: 18px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 12px;
            margin-bottom: 8px;
            border-radius: 4px;
            font-weight: bold;
        }

        .cost-summary {
            background: #ffebee;
            color: #e74c3c;
        }

        .profit-summary {
            background: #e3f2fd;
            color: #3498db;
        }

        .sale-summary {
            background: #e8f5e8;
            color: #27ae60;
            border: 2px solid #27ae60;
        }

        .margin-control {
            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
            border: 2px solid #3498db;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
            text-align: center;
        }

        .margin-control h4 {
            color: #1976d2;
            margin-bottom: 10px;
        }

        .margin-input {
            width: 80px;
            padding: 8px;
            border: 2px solid #3498db;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
            color: #3498db;
            font-size: 16px;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 2px solid #e9ecef;
            grid-column: 1 / -1;
        }

        .back-btn {
            background: #999999;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .back-btn:hover {
            background: #777777;
        }

        .continue-btn {
            background: linear-gradient(135deg, #00B04F 0%, #009944 100%);
            color: white;
            padding: 15px 40px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .continue-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 176, 79, 0.3);
        }

        @media (max-width: 1200px) {
            .content {
                grid-template-columns: 1fr;
            }
            
            .sidebar {
                position: relative;
                order: -1;
            }
        }

        @media (max-width: 768px) {
            .task-details {
                grid-template-columns: 1fr;
            }
            
            .crew-selector {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo-section">
                <div class="company-logo">Current Development Limited</div>
                <div style="border-left: 2px solid rgba(255,255,255,0.3); height: 40px;"></div>
                <div>
                    <div class="logo">ZEUS</div>
                    <div class="subtitle">Labour Allocation & Costing</div>
                </div>
            </div>
        </div>

        <div class="content">
            <div class="main-content">
                <div class="legend">
                    <div class="legend-item">
                        <span style="color: #e74c3c;">■</span>
                        <span>Labour Costs</span>
                    </div>
                    <div class="legend-item">
                        <span style="color: #3498db;">■</span>
                        <span>Profit Margin</span>
                    </div>
                    <div class="legend-item">
                        <span style="color: #27ae60;">■</span>
                        <span>Charge Out Rates</span>
                    </div>
                </div>

                <!-- Labour Rates Configuration -->
                <div class="rates-section">
                    <div class="rates-title">⚙️ Labour Rates Configuration</div>
                    <div class="rates-grid">
                        <div class="rate-item">
                            <div class="rate-label">Engineer Rate/Hour</div>
                            <div class="rate-value">£<input type="number" class="rate-input" id="engineerRate" value="25" onchange="updateRates()"></div>
                        </div>
                        <div class="rate-item">
                            <div class="rate-label">Apprentice/Mate Rate/Hour</div>
                            <div class="rate-value">£<input type="number" class="rate-input" id="apprenticeRate" value="15" onchange="updateRates()"></div>
                        </div>
                    </div>
                </div>

                <!-- Material Choice Impact -->
                <div class="material-choice-section">
                    <div class="choice-title">🔄 Material Choice Impact on Labour</div>
                    <div class="choice-toggle">
                        <span>Separate Copper & Insulation</span>
                        <div class="toggle-switch" id="materialToggle" onclick="toggleMaterialChoice()">
                            <div class="toggle-slider"></div>
                        </div>
                        <span>Pre-Insulated Pipe Sets</span>
                    </div>
                    <p style="font-size: 14px; color: #666; margin-top: 10px;">
                        <span id="materialImpact">Using separate components - standard installation time</span>
                    </p>
                </div>

                <!-- Indoor Unit Installation -->
                <div class="section">
                    <div class="section-title">
                        🏠 Indoor Unit Installation
                        <span style="font-size: 14px; color: #666;">(Complexity varies by unit type & location)</span>
                    </div>
                    <div id="indoorTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Outdoor Unit Installation -->
                <div class="section">
                    <div class="section-title">
                        🌤️ Outdoor Unit Installation
                        <span style="font-size: 14px; color: #666;">(Location, mounting, access complexity)</span>
                    </div>
                    <div id="outdoorTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Pipe Work Installation -->
                <div class="section">
                    <div class="section-title">
                        🔧 Pipe Work & Containment
                        <span style="font-size: 14px; color: #666;">(Route complexity, accessibility, height)</span>
                    </div>
                    <div id="pipeworkTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Electrical & Controls -->
                <div class="section">
                    <div class="section-title">
                        ⚡ Electrical & Controls
                        <span style="font-size: 14px; color: #666;">(Cable runs, control complexity)</span>
                    </div>
                    <div id="electricalTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Drainage -->
                <div class="section">
                    <div class="section-title">
                        💧 Drainage Installation
                        <span style="font-size: 14px; color: #666;">(Gravity vs pumped, run length)</span>
                    </div>
                    <div id="drainageTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <!-- Commissioning -->
                <div class="section">
                    <div class="section-title">
                        ✅ System Commissioning
                        <span style="font-size: 14px; color: #666;">(Testing, balancing, documentation)</span>
                    </div>
                    <div id="commissioningTasks">
                        <!-- Populated by JavaScript -->
                    </div>
                </div>

                <div class="navigation">
                    <button class="back-btn" onclick="goBack()">← Back to Materials</button>
                    <button class="continue-btn" onclick="continueToQuote()">Continue to Final Quote →</button>
                </div>
            </div>

            <div class="sidebar">
                <!-- Margin Control -->
                <div class="margin-control">
                    <h4>💰 Profit Margin Control</h4>
                    <input type="number" class="margin-input" id="profitMargin" value="35" min="0" max="100" onchange="updateProfitMargin()">
                    <span style="color: #3498db; font-weight: bold;">%</span>
                </div>

                <!-- Labour Summary -->
                <div class="labour-summary">
                    <h3>⏱️ Labour Summary</h3>
                    <div class="summary-row cost-summary">
                        <span>Total Hours:</span>
                        <span id="totalHours">0.0</span>
                    </div>
                    <div class="summary-row cost-summary">
                        <span>Labour Cost:</span>
                        <span id="totalLabourCost">£0.00</span>
                    </div>
                    <div class="summary-row profit-summary">
                        <span>Profit Margin:</span>
                        <span id="labourProfit">£0.00</span>
                    </div>
                    <div class="summary-row sale-summary">
                        <span>Charge Out Rate:</span>
                        <span id="labourChargeOut">£0.00</span>
                    </div>
                </div>

                <!-- Project Total -->
                <div class="labour-summary">
                    <h3>📊 Project Total</h3>
                    <div class="summary-row cost-summary">
                        <span>Equipment + Materials:</span>
                        <span id="equipmentMaterialsCost">£0.00</span>
                    </div>
                    <div class="summary-row cost-summary">
                        <span>Labour Cost:</span>
                        <span id="projectLabourCost">£0.00</span>
                    </div>
                    <div class="summary-row profit-summary">
                        <span>Total Profit:</span>
                        <span id="projectProfit">£0.00</span>
                    </div>
                    <div class="summary-row sale-summary">
                        <span>TOTAL QUOTE:</span>
                        <span id="projectTotal">£0.00</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Labour task database with complexity-based hours
        const labourTasks = {
            indoor: [
                {
                    name: 'Mount Indoor Unit',
                    complexities: {
                        simple: { hours: 1.0, description: 'Wall mount, easy access, standard height' },
                        medium: { hours: 1.5, description: 'Ceiling cassette or difficult wall position' },
                        complex: { hours: 2.5, description: 'Ducted unit, high ceiling, confined space' }
                    }
                },
                {
                    name: 'Connect Refrigerant Lines',
                    complexities: {
                        simple: { hours: 0.5, description: 'Straight forward connections' },
                        medium: { hours: 0.8, description: 'Tight access, multiple bends' },
                        complex: { hours: 1.2, description: 'Very tight access, complex routing' }
                    }
                }
            ],
            outdoor: [
                {
                    name: 'Position & Mount Outdoor Unit',
                    complexities: {
                        simple: { hours: 1.0, description: 'Ground level, easy access' },
                        medium: { hours: 2.0, description: 'Wall bracket, first floor, crane needed' },
                        complex: { hours: 3.5, description: 'Roof installation, crane + special access' }
                    }
                },
                {
                    name: 'Security Cage Installation',
                    complexities: {
                        simple: { hours: 0.5, description: 'Standard ground-level cage' },
                        medium: { hours: 1.0, description: 'Wall-mounted or elevated cage' },
                        complex: { hours: 1.5, description: 'Custom fabrication required' }
                    }
                },
                {
                    name: 'Drip Tray Installation',
                    complexities: {
                        simple: { hours: 0.3, description: 'Standard tray, easy access' },
                        medium: { hours: 0.5, description: 'Custom sizing or difficult access' },
                        complex: { hours: 0.8, description: 'Bespoke fabrication required' }
                    }
                }
            ],
            pipework: [
                {
                    name: 'Install Containment & Support',
                    complexities: {
                        simple: { hours: 0.8, description: 'Straight runs, easy access, cable tray' },
                        medium: { hours: 1.2, description: 'Some bends, height work, mixed containment' },
                        complex: { hours: 2.0, description: 'Complex routing, confined spaces, multiple methods' }
                    }
                },
                {
                    name: 'Install & Insulate Pipework',
                    complexities: {
                        simple: { hours: 1.5, description: 'Straight forward routing' },
                        medium: { hours: 2.2, description: 'Some complex bends and routing' },
                        complex: { hours: 3.5, description: 'Very complex routing, tight spaces' }
                    }
                }
            ],
            electrical: [
                {
                    name: 'Install Power & Control Cables',
                    complexities: {
                        simple: { hours: 1.0, description: 'Short runs, easy access' },
                        medium: { hours: 1.8, description: 'Longer runs, some difficult access' },
                        complex: { hours: 2.8, description: 'Very long runs, difficult routing' }
                    }
                },
                {
                    name: 'Wire Controls & Commissioning Cable',
                    complexities: {
                        simple: { hours: 0.8, description: 'Standard wiring, basic controls' },
                        medium: { hours: 1.2, description: 'Advanced controls, multiple zones' },
                        complex: { hours: 2.0, description: 'Complex control systems, integration' }
                    }
                }
            ],
            drainage: [
                {
                    name: 'Install Condensate Drainage',
                    complexities: {
                        simple: { hours: 0.8, description: 'Gravity drain, short run' },
                        medium: { hours: 1.5, description: 'Pumped system or long gravity run' },
                        complex: { hours: 2.5, description: 'Complex pumped system, multiple units' }
                    }
                }
            ],
            commissioning: [
                {
                    name: 'System Testing & Commissioning',
                    complexities: {
                        simple: { hours: 2.0, description: 'Single zone, standard testing' },
                        medium: { hours: 3.0, description: 'Multi-zone, advanced testing' },
                        complex: { hours: 4.5, description: 'Complex system, full commissioning report' }
                    }
                }
            ]
        };

        let projectData = {};
        let taskSelections = {};
        let engineerRate = 25;
        let apprenticeRate = 15;
        let profitMargin = 35;
        let usePreInsulated = false;

        function loadProjectData() {
            const data = localStorage.getItem('hvacProjectData');
            if (data) {
                projectData = JSON.parse(data);
                populateAllTasks();
                updateSummary();
            }
        }

        function populateAllTasks() {
            populateTaskSection('indoorTasks', labourTasks.indoor, 'indoor');
            populateTaskSection('outdoorTasks', labourTasks.outdoor, 'outdoor');
            populateTaskSection('pipeworkTasks', labourTasks.pipework, 'pipework');
            populateTaskSection('electricalTasks', labourTasks.electrical, 'electrical');
            populateTaskSection('drainageTasks', labourTasks.drainage, 'drainage');
            populateTaskSection('commissioningTasks', labourTasks.commissioning, 'commissioning');
        }

        function populateTaskSection(containerId, tasks, category) {
            const container = document.getElementById(containerId);
            let html = '';

            tasks.forEach((task, index) => {
                const taskId = `${category}_${index}`;
                html += createTaskCard(taskId, task);
            });

            container.innerHTML = html;
        }

        function createTaskCard(taskId, task) {
            return `
                <div class="task-card" id="card_${taskId}">
                    <div class="task-header">
                        <div class="task-name">${task.name}</div>
                        <div class="complexity-selector">
                            <span style="font-size: 12px; color: #666;">Complexity:</span>
                            <button class="complexity-btn active" onclick="setComplexity('${taskId}', 'simple')">Simple</button>
                            <button class="complexity-btn" onclick="setComplexity('${taskId}', 'medium')">Medium</button>
                            <button class="complexity-btn" onclick="setComplexity('${taskId}', 'complex')">Complex</button>
                        </div>
                    </div>
                    
                    <div class="task-details">
                        <div class="detail-item">
                            <div class="detail-label">Hours Required</div>
                            <div class="detail-value">
                                <input type="number" class="hours-input" id="hours_${taskId}" 
                                       value="${task.complexities.simple.hours}" 
                                       step="0.1" min="0" onchange="updateTaskHours('${taskId}')">
                            </div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Complexity</div>
                            <div class="detail-value" id="complexity_${taskId}">Simple</div>
                        </div>
                        <div class="detail-item">
                            <div class="detail-label">Description</div>
                            <div class="detail-value" id="description_${taskId}" style="font-size: 12px;">
                                ${task.complexities.simple.description}
                            </div>
                        </div>
                    </div>

                    <div class="crew-selector">
                        <div class="crew-option active" onclick="setCrew('${taskId}', 'engineer')" id="crew_engineer_${taskId}">
                            <div class="crew-label">Engineer Only</div>
                            <div class="crew-rate">£${engineerRate}/hr</div>
                        </div>
                        <div class="crew-option" onclick="setCrew('${taskId}', 'pair')" id="crew_pair_${taskId}">
                            <div class="crew-label">Engineer + Apprentice</div>
                            <div class="crew-rate">£${engineerRate + apprenticeRate}/hr</div>
                        </div>
                    </div>

                    <div class="task-calculation">
                        <div class="calc-row">
                            <span>Labour Cost:</span>
                            <span class="cost-value" id="labourCost_${taskId}">£${(task.complexities.simple.hours * engineerRate).toFixed(2)}</span>
                        </div>
                        <div class="calc-row">
                            <span>Profit (${profitMargin}%):</span>
                            <span class="profit-value" id="profit_${taskId}">£${((task.complexities.simple.hours * engineerRate) * profitMargin / 100).toFixed(2)}</span>
                        </div>
                        <div class="calc-row">
                            <span>Charge Out Total:</span>
                            <span class="sale-value" id="chargeOut_${taskId}">£${((task.complexities.simple.hours * engineerRate) * (1 + profitMargin / 100)).toFixed(2)}</span>
                        </div>
                    </div>
                </div>
            `;
        }

        function setComplexity(taskId, complexity) {
            // Update button states
            document.querySelectorAll(`#card_${taskId} .complexity-btn`).forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Find the task data
            const [category, index] = taskId.split('_');
            const task = labourTasks[category][parseInt(index)];
            const complexityData = task.complexities[complexity];

            // Update display
            document.getElementById(`hours_${taskId}`).value = complexityData.hours;
            document.getElementById(`complexity_${taskId}`).textContent = complexity.charAt(0).toUpperCase() + complexity.slice(1);
            document.getElementById(`description_${taskId}`).textContent = complexityData.description;

            // Store selection
            if (!taskSelections[taskId]) taskSelections[taskId] = {};
            taskSelections[taskId].complexity = complexity;
            taskSelections[taskId].hours = complexityData.hours;

            updateTaskCalculation(taskId);
        }

        function setCrew(taskId, crewType) {
            // Update button states
            document.querySelectorAll(`#card_${taskId} .crew-option`).forEach(btn => {
                btn.classList.remove('active');
            });
            document.getElementById(`crew_${crewType}_${taskId}`).classList.add('active');

            // Store selection
            if (!taskSelections[taskId]) taskSelections[taskId] = {};
            taskSelections[taskId].crewType = crewType;

            updateTaskCalculation(taskId);
        }

        function updateTaskHours(taskId) {
            const hours = parseFloat(document.getElementById(`hours_${taskId}`).value) || 0;
            
            if (!taskSelections[taskId]) taskSelections[taskId] = {};
            taskSelections[taskId].hours = hours;

            updateTaskCalculation(taskId);
        }

        function updateTaskCalculation(taskId) {
            const task = taskSelections[taskId] || {};
            const hours = task.hours || 0;
            const crewType = task.crewType || 'engineer';
            
            const hourlyRate = crewType === 'engineer' ? engineerRate : (engineerRate + apprenticeRate);
            const labourCost = hours * hourlyRate;
            const profit = labourCost * (profitMargin / 100);
            const chargeOut = labourCost + profit;

            // Apply pre-insulated adjustment
            let adjustedHours = hours;
            let adjustedLabourCost = labourCost;
            let adjustedProfit = profit;
            let adjustedChargeOut = chargeOut;

            if (usePreInsulated && taskId.includes('pipework')) {
                // 20% time saving for pipework tasks with pre-insulated pipes
                adjustedHours = hours * 0.8;
                adjustedLabourCost = labourCost * 0.8;
                adjustedProfit = adjustedLabourCost * (profitMargin / 100);
                adjustedChargeOut = adjustedLabourCost + adjustedProfit;
            }

            document.getElementById(`labourCost_${taskId}`).textContent = `£${adjustedLabourCost.toFixed(2)}`;
            document.getElementById(`profit_${taskId}`).textContent = `£${adjustedProfit.toFixed(2)}`;
            document.getElementById(`chargeOut_${taskId}`).textContent = `£${adjustedChargeOut.toFixed(2)}`;

            updateSummary();
        }

        function updateRates() {
            engineerRate = parseFloat(document.getElementById('engineerRate').value) || 25;
            apprenticeRate = parseFloat(document.getElementById('apprenticeRate').value) || 15;

            // Update all crew rate displays
            document.querySelectorAll('.crew-option').forEach(option => {
                const isEngineer = option.id.includes('engineer');
                const rateElement = option.querySelector('.crew-rate');
                if (isEngineer) {
                    rateElement.textContent = `£${engineerRate}/hr`;
                } else {
                    rateElement.textContent = `£${engineerRate + apprenticeRate}/hr`;
                }
            });

            // Recalculate all tasks
            Object.keys(taskSelections).forEach(taskId => {
                updateTaskCalculation(taskId);
            });
        }

        function updateProfitMargin() {
            profitMargin = parseFloat(document.getElementById('profitMargin').value) || 35;

            // Update all profit displays
            document.querySelectorAll('[id^="profit_"]').forEach(element => {
                const taskId = element.id.replace('profit_', '');
                updateTaskCalculation(taskId);
            });
        }

        function toggleMaterialChoice() {
            const toggle = document.getElementById('materialToggle');
            const impact = document.getElementById('materialImpact');
            
            usePreInsulated = !usePreInsulated;
            
            if (usePreInsulated) {
                toggle.classList.add('active');
                impact.textContent = 'Using pre-insulated pipe sets - 20% time saving on pipework tasks';
            } else {
                toggle.classList.remove('active');
                impact.textContent = 'Using separate components - standard installation time';
            }

            // Recalculate pipework tasks
            Object.keys(taskSelections).forEach(taskId => {
                if (taskId.includes('pipework')) {
                    updateTaskCalculation(taskId);
                }
            });
        }

        function updateSummary() {
            let totalHours = 0;
            let totalLabourCost = 0;
            let totalProfit = 0;

            Object.keys(taskSelections).forEach(taskId => {
                const task = taskSelections[taskId] || {};
                const hours = task.hours || 0;
                const crewType = task.crewType || 'engineer';
                const hourlyRate = crewType === 'engineer' ? engineerRate : (engineerRate + apprenticeRate);
                
                let adjustedHours = hours;
                if (usePreInsulated && taskId.includes('pipework')) {
                    adjustedHours = hours * 0.8;
                }

                const labourCost = adjustedHours * hourlyRate;
                const profit = labourCost * (profitMargin / 100);

                totalHours += adjustedHours;
                totalLabourCost += labourCost;
                totalProfit += profit;
            });

            const totalChargeOut = totalLabourCost + totalProfit;

            document.getElementById('totalHours').textContent = totalHours.toFixed(1);
            document.getElementById('totalLabourCost').textContent = `£${totalLabourCost.toFixed(2)}`;
            document.getElementById('labourProfit').textContent = `£${totalProfit.toFixed(2)}`;
            document.getElementById('labourChargeOut').textContent = `£${totalChargeOut.toFixed(2)}`;

            // Project totals (simplified - would include equipment and materials)
            const equipmentCost = projectData.selectedEquipment?.yourPrice || 0;
            const materialsCost = 2500; // Placeholder - would come from materials page
            
            document.getElementById('equipmentMaterialsCost').textContent = `£${(equipmentCost + materialsCost).toFixed(2)}`;
            document.getElementById('projectLabourCost').textContent = `£${totalLabourCost.toFixed(2)}`;
            document.getElementById('projectProfit').textContent = `£${(totalProfit + materialsCost * 0.3).toFixed(2)}`;
            document.getElementById('projectTotal').textContent = `£${(equipmentCost + materialsCost + totalChargeOut + materialsCost * 0.3).toFixed(2)}`;
        }

        function goBack() {
            alert('Going back to materials selection...');
        }

        function continueToQuote() {
            // Save labour data and continue to final quote
            const completeProjectData = {
                ...projectData,
                labourSelections: taskSelections,
                rates: { engineer: engineerRate, apprentice: apprenticeRate },
                profitMargin: profitMargin,
                usePreInsulated: usePreInsulated
            };
            
            localStorage.setItem('hvacProjectData', JSON.stringify(completeProjectData));
            alert('Labour allocation complete! Ready to generate final quote.');
        }

        // Initialize default selections
        function initializeDefaults() {
            // Set default complexity and crew for all tasks
            Object.keys(labourTasks).forEach(category => {
                labourTasks[category].forEach((task, index) => {
                    const taskId = `${category}_${index}`;
                    taskSelections[taskId] = {
                        complexity: 'simple',
                        hours: task.complexities.simple.hours,
                        crewType: 'engineer'
                    };
                });
            });

            updateSummary();
        }

        // Initialize page
        window.addEventListener('load', function() {
            loadProjectData();
            initializeDefaults();
        });
    </script>
</body>
</html>